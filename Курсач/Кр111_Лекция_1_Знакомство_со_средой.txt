Лекция 1
Heading 1
228600



Normal
None


Установка
Heading 2
228600


Для начала нам потребуется скачать питон с официального сайта. Важно (!) поставить галочку add python __ to PATH. Затем нажать Install now. После чего запустить скаченный файл.
Normal
None


Можно работать с питоновскими файлами и без среды разработки (IDE), но это не совсем удобно, так как для запуска файла с расширение .py в терминале (это командная строка или же cmd) придется после перехода в директорию с файлом написать python ___.py, после чего в консоли появится результат выполнения программы.
Normal
None


Более легкий способ потребует для запуска нажать на одну кнопку. И вариант этот называется PyCharm. Скачать можно с сайта https://www.jetbrains.com/pycharm/download/ . Нужна Community версия, она полностью бесплатна и почти не имеет обрезанного функционала, так как программировать мы будем только на Питоне. А профессиональная версия включает в себя еще расширенные инструменты для разработки на HTML, JS и баз данных SQL.
Normal
None



Normal
None


Арифметические операции 
Heading 2
228600


Рассмотрим простейшие арифметические операции и как они выглядят на Питоне:
Normal
None


Сложение  + (+=):   3 + 2 = 5
Normal
None


Вычитание  - (-=):  3 – 2 = 1
Normal
None


Умножение  * (*=):  3 * 2 = 6
Normal
None


Возведение в степень  **:  3 ** 2 = 9
Normal
None


Деление  / (/=):  7 / 3 = 2.333333…
Normal
None


Целая часть от деления  //:  7 // 3 = 2
Normal
None


Остаток от деления  %:  7 % 3 = 1
Normal
None



Normal
None


Переменные и синтаксис
Normal
None


Python может определить тип переменной: для x = 1.35 будет выведен тип FLOAT. 
Normal
None


Что будет выведено, если
Normal
None


x = input()   
Пример кода
152400


y = input() 
Пример кода
152400


print(x+y)   
Пример кода
152400



Normal
None


при введении чисел 123 и 354. Должно быть 477? Нет, 123354. Всё это связанно с динамической типизацией и тем, что input выдает строковое значение. Чтобы преобразовать переменную одного типа в другой, мы можем использовать следующие функции:
Normal
None


str(х) - переводит переменную х в строковую
Normal
None


int(х) – переводит переменную х в целочисленную
Normal
None


float(х) – переводит переменную х в переменную с плавающей точкой
Normal
None


Тип bool – это  логические переменные, то есть принимающие значение True (истина) или False (ложь).
Normal
None


Ко всем переменным можно просто обращаться по имени и получать их значение. Но строковые переменные – особенные, и к ним можно обращаться по индексу символа. Индексация в строке происходит с нуля. Вывести длину строковой переменной можно командой len(s). Пример обращения к строке по индексу:
Normal
None


S=’spam’
Пример кода
152400


print(S[0])  >> s
Пример кода
152400


print(S[2])  >> a
Пример кода
152400


print(S[-2]) >>a
Пример кода
152400


Строки можно умножать на числа, складывать между собой.
Normal
None


S1 = 'spam'
Пример кода
152400


S2 = 'eggs'
Пример кода
152400


print(S1 + S2)	>>'spameggs'
Пример кода
152400



Пример кода
152400


print('spam' * 3)  >>spamspamspam
Пример кода
152400



Normal
None


Строковые переменные можно доставать «срезами», делается это так:
Normal
None


название_переменной[X:Y], где X – начало среза, а Y – окончание;
Normal
None


символ с номером Y в срез не входит. По умолчанию первый индекс равен 0, а второй - длине строки.
Normal
None


s = 'spameggs'
Пример кода
152400


>>> s[3:5] >>'me'
Пример кода
152400


>>> s[2:-2] >>'ameg'
Пример кода
152400


>>> s[:6]	>>'spameg'
Пример кода
152400


>>> s[1:]	>>'pameggs'
Пример кода
152400



Normal
None


Функции для перевода всей строки в верхний регистр _.upper(), а для перевода всей строки в нижний регистр _.lower(), _.title() это перевод начальных символов всех слов в верхний регистр, _.capitalize() только первый символ заглавный. 
Normal
None


Сбор строки из массива осуществляется так
Normal
None


 переменная = “способ связи”.join (название массива) или вместо массива можно указать название строковой переменной для разделения между каждым символом указанным способом связи.
Normal
None


Условные операторы
Heading 2
228600


Синтаксис условных операторов if elif else:
Normal
None


if условия 1: 
Пример кода
152400


    действие 1
Пример кода
152400


elif условие 2:
Пример кода
152400


    действие 2
Пример кода
152400


else:
Пример кода
152400


    действие 3
Пример кода
152400


Блок elif является необязательным и конструкцию if elif else можно построить обычным образом если иначе –  if else. Elif может быть сколько угодно.
Normal
None



Normal
None


Укороченная версия if-else:
Normal
None


if X:
Пример кода
152400


    A=Y
Пример кода
152400


else:
Пример кода
152400


    A=Z
Пример кода
152400


Можно также написать A=Y if X else Z. В литературе этот прием называется трехместное выражение if-else.
Normal
None



Normal
None


Логические операции
Heading 2
228600


Сравнение возвращает логическое значение.
Normal
None


Рассмотрим основные логические операторы: X and Y – логическое И (выдает истину только когда Х И Y истинны), X or Y – логическое ИЛИ (выдает истину, если хотя бы 1 из двух истинно), X xor Y – взаимоисключающее ИЛИ (является истиной, если только одно из двух истина), not X – логическое отрицание (инверсия).
Normal
None



Normal
None



Normal
None



Normal
None


